<!--
 	Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.

    WSO2 LLC. licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except
    in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="ragChat">
    <parameter name="connections" description="Connections"/>
    <parameter name="userID" description="User ID"/>
    <parameter name="prompt" description="Prompt name"/>
    <parameter name="outputType" description="Response type"/>
    <parameter name="responseVariable" description="Response variable name"/>
    <parameter name="overwriteBody"
               description="Replace the Message Body in Message Context with the response of the operation."/>

    <parameter name="embeddingModel" description="Embedding Model"/>

    <parameter name="maxResults" description="Max results from the vector store"/>
    <parameter name="minScore" description="Minimum score for a result"/>

    <parameter name="modelName" description="Model name"/>
    <parameter name="temperature" description="Temperature"/>
    <parameter name="maxTokens" description="Max tokens"/>
    <parameter name="topP" description="Top P"/>
    <parameter name="frequencyPenalty" description="Frequency penalty"/>
    <parameter name="seed" description="Seed"/>

    <parameter name="system" description="System prompt"/>
    <parameter name="knowledge" description="Knowledge store"/>
    <parameter name="history" description="Chat history"/>
    <parameter name="maxHistory" description="Max chat messages to be used in history"/>

    <sequence>
        <class name="org.wso2.carbon.esb.module.ai.config.Configure"/>
        <filter xpath="${exists(props.synapse._LLM_CONFIG_KEY) &amp;&amp;
        exists(props.synapse._VECTOR_STORE_CONFIG_KEY) &amp;&amp; exists(props.synapse._EMBEDDING_CONFIG_KEY)}">
            <then>
                <variable name="RAG_CHAT_TEMP_VAR" expression="${params.functionParams.prompt}"/>
                <ai.prompt>
                    <prompt>{${vars.RAG_CHAT_TEMP_VAR}}</prompt>
                    <responseVariable>RAG_CHAT_TEMP_VAR</responseVariable>
                    <overwriteBody>false</overwriteBody>
                </ai.prompt>
                <variable name="RAG_CHAT_PARSED_PROMPT" expression="${vars.RAG_CHAT_TEMP_VAR.payload}"/>

                <!--Generate embedding the prompt-->
                <ai.invokeConnection configKey="{${props.synapse._EMBEDDING_CONFIG_KEY}}"/>
                <ai.generateEmbeddings>
                    <input>{${vars.RAG_CHAT_TEMP_VAR.payload}}</input>
                    <model>{${params.functionParams.embeddingModel}}</model>
                    <responseVariable>RAG_CHAT_TEMP_VAR</responseVariable>
                    <overwriteBody>false</overwriteBody>
                </ai.generateEmbeddings>

                <!--Search the knowledge store for the prompt-->
                <ai.invokeConnection configKey="{${props.synapse._VECTOR_STORE_CONFIG_KEY}}"/>
                <ai.searchStore>
                    <input>{${vars.RAG_CHAT_TEMP_VAR.payload[0].embedding}}</input>
                    <maxResults>{${params.functionParams.maxResults}}</maxResults>
                    <minScore>{${params.functionParams.minScore}}</minScore>
                    <!--                    <filter>{${params.functionParams.filter}}</filter>-->
                    <responseVariable>RAG_CHAT_TEMP_VAR</responseVariable>
                    <overwriteBody>false</overwriteBody>
                </ai.searchStore>

                <!--Chat with the system using the prompt and knowledge-->
                <variable name="SKIP_CONFIG_PROCESSING" type="BOOLEAN" value="true"/>
                <ai.chat>
                    <system>{${exists(params.functionParams.system) ? params.functionParams.system : ""}}</system>
                    <userID>{${params.functionParams.userID}}</userID>
                    <prompt>{${vars.RAG_CHAT_PARSED_PROMPT}}</prompt>
                    <outputType>{${params.functionParams.outputType}}</outputType>
                    <responseVariable>{${params.functionParams.responseVariable}}</responseVariable>
                    <overwriteBody>false</overwriteBody>
                    <modelName>{${params.functionParams.modelName}}</modelName>
                    <temperature>{${exists(params.functionParams.temperature) ? params.functionParams.temperature : ""}}</temperature>
                    <maxTokens>{${params.functionParams.maxTokens}}</maxTokens>
                    <topP>{${exists(params.functionParams.topP) ? params.functionParams.topP : ""}}</topP>
                    <frequencyPenalty>{${exists(params.functionParams.frequencyPenalty) ? params.functionParams.frequencyPenalty : ""}}</frequencyPenalty>
                    <seed>{${exists(params.functionParams.seed) ? params.functionParams.seed : ""}}</seed>
                    <knowledge>{${vars.RAG_CHAT_TEMP_VAR.payload}}</knowledge>
                    <maxHistory>{${params.functionParams.maxHistory}}</maxHistory>
                </ai.chat>
                <property name="_LLM_CONFIG_KEY" scope="default" action="remove"/>
                <property name="_VECTOR_STORE_CONFIG_KEY" scope="default" action="remove"/>
                <property name="_EMBEDDING_CONFIG_KEY" scope="default" action="remove"/>
                <class name="org.wso2.carbon.esb.module.ai.config.ResponseProcessor"/>
            </then>
            <else>
                <payloadFactory media-type="json" template-type="default">
                    <format><![CDATA[{
                        "error": "The following connections are not provided: ${not(exists(props.synapse._LLM_CONFIG_KEY)) ? 'LLM Connection' : ''}"
                        }]]></format>
                </payloadFactory>
                <throwError type="string" errorMessage="{${payload}}"/>
            </else>
        </filter>
    </sequence>
</template>
