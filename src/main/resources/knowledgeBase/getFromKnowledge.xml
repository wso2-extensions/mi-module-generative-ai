<!--
 	Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.

    WSO2 LLC. licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except
    in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="getFromKnowledge">
    <parameter name="connections" description="Connections"/>

    <parameter name="input" description="Input"/>

    <parameter name="needEmbedding" description="Need Embedding"/>
    <parameter name="embeddingModel" description="Embedding Model"/>

    <parameter name="maxResults" description="Max results from the vector store"/>
    <parameter name="minScore" description="Minimum score for a result"/>
    <parameter name="filter" description="Metadata filter for the results"/>
    <parameter name="responseVariable" description="Response variable name"/>
    <parameter name="overwriteBody"
               description="Replace the Message Body in Message Context with the response of the operation."/>
    <sequence>
        <class name="org.wso2.carbon.esb.module.ai.config.Configure"/>
        <filter xpath="${exists(props.synapse._VECTOR_STORE_CONFIG_KEY) &amp;&amp;
        (not(boolean(params.functionParams.needEmbedding)) || exists(props.synapse._EMBEDDING_CONFIG_KEY))}">
            <then>
                <variable name="GET_FROM_KNOWLEDGE_INPUT" expression="${params.functionParams.input}"/>
                <filter xpath="${boolean(params.functionParams.needEmbedding)}">
                    <ai.invokeConnection configKey="{${props.synapse._EMBEDDING_CONFIG_KEY}}"/>
                    <ai.generateEmbeddings>
                        <input>{${vars.GET_FROM_KNOWLEDGE_INPUT}}</input>
                        <model>{${params.functionParams.embeddingModel}}</model>
                        <responseVariable>GET_FROM_KNOWLEDGE_INPUT</responseVariable>
                        <overwriteBody>false</overwriteBody>
                    </ai.generateEmbeddings>
                    <variable name="GET_FROM_KNOWLEDGE_INPUT"
                              expression="${vars.GET_FROM_KNOWLEDGE_INPUT.payload[0].embedding}"/>
                </filter>
                <ai.invokeConnection configKey="{${props.synapse._VECTOR_STORE_CONFIG_KEY}}"/>
                <ai.searchStore>
                    <input>{${vars.GET_FROM_KNOWLEDGE_INPUT}}</input>
                    <maxResults>{${params.functionParams.maxResults}}</maxResults>
                    <minScore>{${params.functionParams.minScore}}</minScore>
                    <!--                    <filter>{${params.functionParams.filter}}</filter>-->
                    <responseVariable>{${params.functionParams.responseVariable}}</responseVariable>
                    <overwriteBody>false</overwriteBody>
                </ai.searchStore>
                <class name="org.wso2.carbon.esb.module.ai.config.ResponseProcessor"/>
            </then>
            <else>
                <payloadFactory media-type="json" template-type="default">
                    <format><![CDATA[{
                        "error": "The following connections are not provided: ${not(exists(props.synapse._VECTOR_STORE_CONFIG_KEY)) ? 'Vector Store Connection' : ''}${(boolean(params.functionParams.needEmbedding) && not(exists(props.synapse._EMBEDDING_CONFIG_KEY))) ? ', Embedding Model Connection' : ''}"
                        }]]></format>
                </payloadFactory>
                <throwError type="string" errorMessage="{${payload}}"/>
            </else>
        </filter>
    </sequence>
</template>
